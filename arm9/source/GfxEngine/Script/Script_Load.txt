#include "GfxEngine/Events.h"
#include "GfxEngine/MapLoad.h"
#include "GfxEngine/Script/Script_Objects.h"
#include "GfxEngine/Settings.h"
#include "GfxEngine/output/Inventory.h"
#include "GfxEngine/render/Autotiles.h"
#include "GfxEngine/render/Ground.h"
#include "GfxEngine/texture/DynamicLights.h"
#include "Script.h"

bool LoadingNow;

void LineToCommand(char Com[]); // This line compares string with a command list
// and if it is a command it gives that to the next function

void LoadSong(char *Com); // Gives song name to soundengine

void AddEvent(char *com); // Adds a event which will be turn on on starting map
void AddDoorTXT(char *com);

extern void LoadCharCommand(char *Com, int num); // Gets the filename out of the command ,for loading a chartexture
extern void LoadVillager(char *Com);             // Adds the attributes for Villagers
extern void AddText(char *com, int num);         // Adds a text to a specific villiager(npc)

extern void LoadEnemy(char *Com);

extern void LoadObjectCommand(char *Com, int num);       // Gets the filename out of the command ,for loading trees walls and all other objects
extern void LoadSecondObjectCommand(char *Com, int num); // Used for an overlaymesh
extern void AddObjectScale(char *Com, int num);
void AddObjectUnpass(char *Com, int num); // Its the unpassable radius (from 0.0 to 0.5)
void SetOffObjectGround(int num);
void SetOffObjectMirrow(int num);

void AddFirefly(char *Com); // Adds a randomy-flying-arround-dynamic-light(with given color)

extern void LoadMapCommand(char *Com);    // Gets the filename out of the command ,for loading the map
extern void LoadMapChange(char *Com);     // adds the attributes for exits of map
extern void LoadMapChangeDoor(char *Com); // adds the attributes for exits of map through a door which could need a key
extern void LoadDoorCommand(char *Com);
void LoadEdgeCommand(char *Com);

extern void LoadGroundCommand(char *Com, int index); // Gets the filename and colorkey out of the command ,for loading a groundtexture
extern void LoadWasserCommand(char *Com);           // Gets the filename and colorkey out of the command ,for loading a wassertexture
extern void LoadAutotileCommand(char *Com, int num);
extern void AddAutotileIgnoreCommand(char *Com, int num);

int aut  = -1;
int obj  = -1;
int npc  = -1;
int door = -1;
int ene  = -1;

char SongFile[40];

char Script[256][256];

void LoadScript(char filename[])
{
    int a;
    // LoadingNow = true;
    irqSet(IRQ_VBLANK, NULL);

    ScreenModeLOADING();
    // Reset all datas
    ResetMapChange();
    glResetTextures();
    ResetVillagers();
    ResetEnemys();
    ResetEvent();
    for (a = 0; a < 16; a++)
        GroundColorKey[a] = 0;
    for (a = 0; a < 16; a++)
        GroundTransEnable[a] = false;
    for (a = 0; a < 4; a++) {
        AutotileColorKeyMaster[a]  = 0;
        AutotileIgnorecolorsNum[a] = -1;
    }
    for (a = 0; a < 10; a++)
        Object[a].ColorKey = 0;
    for (a = 0; a < 10; a++)
        strcpy(Object[a].Type, ".");
    for (a = 0; a < 10; a++)
        Object[a].Radius = 0;
    FreeModels();
    ResetDynamic();

    PlPosSX  = 0;
    PlPosSY  = 0;
    CamPosSX = 0;
    CamPosSY = 0;
    outside  = true;
    srand(-(~IPC->curtime[7]) - 1);

    strcpy(SongFile, "");

    KOS_FILE *ScriptFile = KOS_fopen(filename, "r");
    if (ScriptFile == NULL) {
        PrintOUT(filename, 5, 5, false, strlen(filename));
        PrintOUT("wasnt found", 5, 15, false, strlen("wasnt found"));
        while (!(keysDown() & KEY_A))
            scanKeys();
        ScreenModeLOADING();
        return;
    }

    char text[256];
    int count = 0;

    int x;
    for (x = 0; x < 256; x++)
        strcpy(Script[x], "");
    char mem[20];

    while (!KOS_feof(ScriptFile)) {
        KOS_fgets(text, 255, ScriptFile);

        if (text[0] != '/') {
            if (count < 256)
                strcpy(Script[count], text);
            count++;
        }

        strcpy(text, "");
    }
    KOS_fclose(ScriptFile);

    int b = 0;
    for (int a = 0; a <= count; a++) {
        PercentBar(a, count);
        // Print(Script[a],5,10);
        LineToCommand(Script[a]);
        b++;
        if (b > 6)
            b = 0;

        sprintf(mem, "Dynamic memory: %dKB/%dKB", mallinfo().uordblks / 1024, mallinfo().arena / 1024);
        Print(mem, 0, 172);
        PrintOUT(mem, 1, 173, false, strlen(mem));
    }

    PreCalcAll();
    LoadMainChar();
    ScreenMode();

    StartSong(SongFile);

    TextBoxmode(EventSpeech, EventSpeechCount, -1);
    // LoadingNow = false;
    irqSet(IRQ_VBLANK, vBlank);
}
